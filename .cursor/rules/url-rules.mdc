---
description: the URL rules
globs: *.mjs, *.js, *.tsx
alwaysApply: false
---
# Next.js Static Export URL and File Naming Rules

## Blog Overview

This blog uses Next.js static export mode with a "clean URL" strategy (without file extensions) while maintaining compatibility with static file systems.

## Current Implementation

In Next.js static export (`output: 'export'`) mode, we use the following URL and file naming strategy:

1. **Link URL Format**: Clean URLs without extensions - `/{year}/{month}/{day}/{title}`
2. **Static File Format**: Build generates files with extensions - `{year}/{month}/{day}/{title}.html`
3. **RSC Data Files**: Provides both `.txt` and `.html.txt` formats to ensure compatibility

## Key Configuration and Implementation

### 1. Next.js Configuration

```javascript
// next.config.mjs
const nextConfig = {
  output: 'export',
  trailingSlash: false,  // Generates /path/file.html instead of /path/file/index.html
};
```

### 2. RSC Data File Handling

Uses a post-build script to create data files in two formats:

- Original format: `/path/file.txt`
- Compatible format: `/path/file.html.txt`

### 3. Route Parameters Generation

```typescript
// app/[...slug]/page.tsx
export async function generateStaticParams() {
  const posts = await getLatestPosts();

  return posts.map((post) => {
    // Remove any .html extension
    const cleanSlug = post.slug.replace(/\.html$/, '');
    // Split path segments
    const segments = cleanSlug.split('/');

    return { slug: segments };
  });
}
```

### 4. Link Generation Rules

```tsx
// Use clean URLs (without .html extension)
<Link href={`/${post.slug.replace(/\.html$/, '')}`}>
  {post.title}
</Link>
```

### 5. Post Lookup Logic

```typescript
// Remove any .html extension before matching
const cleanSlug = fullSlug.replace(/\.html$/, '');
const post = posts.find(p => p.slug === cleanSlug);
```

## Deployment Considerations

1. **Static Hosting Compatibility**: GitHub Pages and Cloudflare Pages automatically handle extension-less URL requests, correctly serving the corresponding HTML files
2. **Consistency Requirement**: Ensure all internal links use a consistent clean URL format (without `.html` suffix)
3. **Parameter Handling**: When reading dynamic route parameters, remember to clean any potential `.html` suffix
4. **Data Files**: The post-build script preserves original `.txt` files while creating compatible `.html.txt` files
5. **Route Synchronization**: When modifying link formats, make sure to update both `generateStaticParams` and link generation logic
